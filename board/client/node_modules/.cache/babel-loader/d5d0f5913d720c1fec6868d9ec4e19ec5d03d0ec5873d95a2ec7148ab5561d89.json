{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zz909\\\\git\\\\react\\\\React_TJE\\\\board\\\\client\\\\src\\\\containers\\\\BoardReadContainer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport * as boards from '../apis/boards';\nimport BoardRead from '../components/BoardRead/BoardRead';\n\n// 👩‍💻 게시글 조회\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BoardReadContainer = () => {\n  _s();\n  const {\n    no\n  } = useParams();\n  const [board, setBoard] = useState({});\n  const [isLoading, setLoading] = useState(false);\n  const getBoard = async () => {\n    setLoading(true);\n    try {\n      const response = await boards.select(no);\n      const data = response.data;\n      console.log(data);\n      setBoard(data);\n    } catch (e) {\n      console.log(e);\n    }\n    setLoading(false);\n  };\n  useEffect(() => {\n    getBoard();\n  }, []);\n\n  // return <></>\n  return /*#__PURE__*/_jsxDEV(BoardRead, {\n    no: no,\n    board: board,\n    isLoading: isLoading\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 13\n  }, this);\n};\n_s(BoardReadContainer, \"8H2cIUuNtAhjzaOQKtV5IsV8r8o=\", false, function () {\n  return [useParams];\n});\n_c = BoardReadContainer;\nexport default BoardReadContainer;\nvar _c;\n$RefreshReg$(_c, \"BoardReadContainer\");","map":{"version":3,"names":["React","useEffect","useState","Link","useParams","boards","BoardRead","jsxDEV","_jsxDEV","BoardReadContainer","_s","no","board","setBoard","isLoading","setLoading","getBoard","response","select","data","console","log","e","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/zz909/git/react/React_TJE/board/client/src/containers/BoardReadContainer.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Link, useParams } from 'react-router-dom'\r\nimport * as boards from '../apis/boards'\r\nimport BoardRead from '../components/BoardRead/BoardRead';\r\n\r\n// 👩‍💻 게시글 조회\r\nconst BoardReadContainer = () => {\r\n    const { no } = useParams()\r\n\r\n    const [board, setBoard] = useState({});\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    const getBoard = async () => {\r\n        setLoading(true)\r\n        try {\r\n            const response = await boards.select(no);\r\n            const data = response.data;\r\n            console.log(data);\r\n            setBoard(data);\r\n        }\r\n        catch(e) {\r\n            console.log(e);\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect( () => {\r\n        getBoard()\r\n    },[])\r\n\r\n    // return <></>\r\n    return (<BoardRead  no={no}\r\n                        board={board}\r\n                        isLoading={isLoading}\r\n           />)\r\n}\r\n\r\nexport default BoardReadContainer"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,EAAEC,SAAS,QAAQ,kBAAkB;AAClD,OAAO,KAAKC,MAAM,MAAM,gBAAgB;AACxC,OAAOC,SAAS,MAAM,mCAAmC;;AAEzD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM;IAAEC;EAAG,CAAC,GAAGP,SAAS,CAAC,CAAC;EAE1B,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtC,MAAM,CAACY,SAAS,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMc,QAAQ,GAAG,MAAAA,CAAA,KAAY;IACzBD,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACA,MAAME,QAAQ,GAAG,MAAMZ,MAAM,CAACa,MAAM,CAACP,EAAE,CAAC;MACxC,MAAMQ,IAAI,GAAGF,QAAQ,CAACE,IAAI;MAC1BC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjBN,QAAQ,CAACM,IAAI,CAAC;IAClB,CAAC,CACD,OAAMG,CAAC,EAAE;MACLF,OAAO,CAACC,GAAG,CAACC,CAAC,CAAC;IAClB;IACAP,UAAU,CAAC,KAAK,CAAC;EACrB,CAAC;EAEDd,SAAS,CAAE,MAAM;IACbe,QAAQ,CAAC,CAAC;EACd,CAAC,EAAC,EAAE,CAAC;;EAEL;EACA,oBAAQR,OAAA,CAACF,SAAS;IAAEK,EAAE,EAAEA,EAAG;IACPC,KAAK,EAAEA,KAAM;IACbE,SAAS,EAAEA;EAAU;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AACb,CAAC;AAAAhB,EAAA,CA7BKD,kBAAkB;EAAA,QACLL,SAAS;AAAA;AAAAuB,EAAA,GADtBlB,kBAAkB;AA+BxB,eAAeA,kBAAkB;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}